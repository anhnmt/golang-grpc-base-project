// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/xdorro/golang-grpc-base-project/internal/module/auth/biz"
	"github.com/xdorro/golang-grpc-base-project/internal/module/auth/service"
	"github.com/xdorro/golang-grpc-base-project/internal/module/user/biz"
	"github.com/xdorro/golang-grpc-base-project/internal/module/user/service"
	"github.com/xdorro/golang-grpc-base-project/internal/server"
	"github.com/xdorro/golang-grpc-base-project/internal/server/gateway"
	"github.com/xdorro/golang-grpc-base-project/internal/server/grpc"
	"github.com/xdorro/golang-grpc-base-project/internal/service"
	"github.com/xdorro/golang-grpc-base-project/pkg/casbin"
	"github.com/xdorro/golang-grpc-base-project/pkg/redis"
	"github.com/xdorro/golang-grpc-base-project/pkg/repo"
)

// Injectors from wire.go:

func initServer() *server.Server {
	repoRepo := repo.NewRepo()
	redisRedis := redis.NewRedis()
	biz := userbiz.NewBiz(repoRepo)
	userserviceService := userservice.NewService(biz)
	authbizBiz := authbiz.NewBiz(repoRepo)
	authserviceService := authservice.NewService(authbizBiz)
	serviceService := service.NewService(repoRepo, redisRedis, userserviceService, authserviceService)
	casbinCasbin := casbin.NewCasbin(repoRepo)
	grpcServer := grpc.NewGrpcServer(serviceService)
	serveMux := gateway.NewGatewayServer(serviceService)
	serverServer := server.NewServer(serviceService, casbinCasbin, grpcServer, serveMux)
	return serverServer
}
